# This configuration file aims to document currently-available options for the SCALE Client.
# The 'class' fields are used to import the relevant module so as long as that module name is available on your PYTHONPATH it should work.
# The other fields are passed as arguments to that class's constructor.
# You may also wish to try running with the 'test_config.yml' file first to verify the most basic features of the client work.
# Note that these options may not be fully comprehensive and will evolve over time.

Main:
    # These options are used to configure the Broker and EventReporter
    #DEPRECATED: an older version of SCALE used a thread-safe event queue implementation of the Broker
    #event_queue_size: 4096

EventSinks:
    # Each entry here starts up an EventSink for forwarding events to external recipients.
    # By default, not enabling any EventSinks will cause SCALE to start the LogEventSink:
    #- LogEventSink:
    #    class: "log_event_sink.LogEventSink"
    # This is our default MQTT broker configuration
    #- MQTTPublisher:
    #    class: "mqtt_event_sink.MQTTEventSink"
    #    hostname: "iqueue.ics.uci.edu"
    #    hostport: 1883
    #    username: null
    #    password: null
    #    keepalive: 60

Applications:
    # Each entry here starts up an Application that may subscribe to and/or publish SensedEvents
    # This module collects the client's location info and reports it.
    - LocationManager:
        class: "location_manager.LocationManager"

Sensors:
    # Each entry here starts up a VirtualSensor that will (a)periodically read data and possibly report SensedEvents.
    # NOTE: most sensors have a 'dummy' version that doesn't require the actual hardware (see dummy_config.yml),
    # but the ones enabled here require only Internet access.
    ### Miscellaneous VirtualSensors
    # The HBSensor simply periodically sends a heartbeat to external sources to check liveness.
    - HBSensor:
        class: "heartbeat_virtual_sensor.HeartbeatVirtualSensor"
        dev_name: "hb0"
        interval: 60
    #- GeoIPSensor:
    #    class: "location_sensors.geo_ip_virtual_sensor.GeoIPVirtualSensor"
    #    dev_name: "geoip0"
    # Uses UDP to verify (more quickly/reliably than with TCP or ICMP) whether the client has public Internet access
    - InternetAccessSensor:
        class: "internet_access_virtual_sensor.InternetAccessVirtualSensor"
        dev_name: "net0"
    #- RawAnalogSensor:
    #    class: "raw_analog_virtual_sensor.RawAnalogVirtualSensor"
    #    dev_name: "raw0"
    #    analog_port: 2
    ### Various environmental sensors
    #- LightSensor:
    #    class: "light_virtual_sensor.LightVirtualSensor"
    #    dev_name: "light0"
    #    analog_port: 3
    #- GasSensor:
    #    class: "gas_virtual_sensor.GasVirtualSensor"
    #    dev_name: "gas0"
    #    analog_port: 0
    #- TemperatureSensor:
    #    class: "temperature_virtual_sensor.TemperatureVirtualSensor"
    #    dev_name: "cel0"
    ### Presence sensors
    #- PIRSensor:
    #    class: "pir_virtual_sensor.PIRVirtualSensor"
    #    dev_name: "pir0"
    #    gpio_pin: 17
    ### VirtualSensors that detect higher-level events: should work with dummy_sensors
    #- PIRNoMotionSensor:
    #    class: "pir_no_motion_virtual_sensor.PIRNoMotionVirtualSensor"
    #    dev_name: "nomot0"
    #- LightFlashSensor:
    #    class: "light_flash_virtual_sensor.LightFlashVirtualSensor"
    #    dev_name: "flash0"
    #- TemperatureHighSensor:
    #    class: "temperature_high_virtual_sensor.TemperatureHighVirtualSensor"
    #    dev_name: "heat0"

Networks:
    # These options configure various networking-related components, such as the mesh relay that is currently unsupported.
